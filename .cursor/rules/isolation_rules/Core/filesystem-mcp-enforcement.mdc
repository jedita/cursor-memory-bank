---
description: Centralized FileSystem MCP enforcement for all modes
globs: filesystem-mcp-enforcement.mdc
alwaysApply: false
---

# üéØ FILESYSTEM MCP ENFORCEMENT - CENTRALIZED RULE

> **TL;DR:** This rule enforces the use of FileSystem MCP functions across ALL modes instead of platform-specific commands. It provides a unified approach to file operations that eliminates cross-platform inconsistencies and improves reliability.

## üö® MANDATORY MCP USAGE - ALL MODES

**CRITICAL:** All file and directory operations MUST use FileSystem MCP functions when available. This rule applies to VAN, PLAN, CREATIVE, IMPLEMENT, REFLECT, and ARCHIVE modes.

### ‚úÖ MCP Operations (PREFERRED)

| Operation | MCP Function | Traditional Command | Benefits |
|-----------|--------------|-------------------|----------|
| **Create Directory** | `mcp_filesystem_create_directory` | `mkdir`, `New-Item` | Cross-platform, recursive, validation |
| **Write File** | `mcp_filesystem_write_file` | `echo`, `Out-File` | Atomic, encoding-safe, validation |
| **Read File** | `mcp_filesystem_read_file` | `cat`, `Get-Content` | Consistent, encoding-handling |
| **List Directory** | `mcp_filesystem_list_directory` | `ls`, `Get-ChildItem` | Unified format, metadata |
| **Move/Rename** | `mcp_filesystem_move_file` | `mv`, `Move-Item` | Safe, validation, atomic |
| **File Info** | `mcp_filesystem_get_file_info` | `test -f`, `Test-Path` | Detailed metadata |
| **Search Files** | `mcp_filesystem_search_files` | `find`, `Get-ChildItem -Recurse` | Pattern-based, efficient |
| **Edit File** | `mcp_filesystem_edit_file` | `sed`, `PowerShell` | Line-based, safe |
| **Create Multiple** | `mcp_filesystem_write_file` (multiple calls) | `touch file1 file2` | Individual control |

### ‚ùå Platform Commands (AVOID)

**DO NOT USE** these platform-specific commands for file operations:

```bash
# ‚ùå AVOID - Platform-specific
mkdir -p directory
touch file.txt
echo "content" > file.txt
cat file.txt
ls -la
mv source dest
test -f file.txt
find . -name "*.js"
```

```powershell
# ‚ùå AVOID - Platform-specific
New-Item -ItemType Directory
echo. > file.txt
Get-Content file.txt
Get-ChildItem
Move-Item source dest
Test-Path file.txt
Get-ChildItem -Recurse -Filter "*.js"
```

## üîÑ MCP INTEGRATION WORKFLOW

```mermaid
graph TD
    FileOp["File Operation<br>Required"] --> MCPCheck{"MCP Function<br>Available?"}
    
    MCPCheck -->|"Yes"| UseMCP["‚úÖ Use FileSystem MCP<br>Function"]
    MCPCheck -->|"No"| PlatformCmd["‚ö†Ô∏è Use Platform Command<br>with Documentation"]
    
    UseMCP --> MCPBenefits["Benefits:<br>‚Ä¢ Cross-platform reliability<br>‚Ä¢ Consistent error handling<br>‚Ä¢ Built-in validation<br>‚Ä¢ Atomic operations"]
    PlatformCmd --> PlatformLimits["Limitations:<br>‚Ä¢ Platform-specific behavior<br>‚Ä¢ Varied error handling<br>‚Ä¢ Manual validation required"]
    
    MCPBenefits --> Document["üìù Document MCP Operation"]
    PlatformLimits --> DocumentPlatform["üìù Document Platform Command<br>with Justification"]
    
    Document --> Verify["‚úÖ Verify Operation Success"]
    DocumentPlatform --> Verify
    
    style UseMCP fill:#10b981,stroke:#059669,color:white
    style MCPBenefits fill:#d4edda,stroke:#10b981,color:black
    style PlatformCmd fill:#ff9800,stroke:#f57c00,color:white
    style PlatformLimits fill:#fff3e0,stroke:#ff9800,color:black
```

## üìã MCP OPERATION TEMPLATES

### Directory Creation
```javascript
// ‚úÖ CORRECT - MCP Directory Creation
mcp_filesystem_create_directory({
    path: "memory-bank/2025-07-20 12:30 -- VAN -- project-name"
});

// ‚ùå INCORRECT - Platform Command
run_terminal_cmd({
    command: "mkdir -p memory-bank/2025-07-20 12:30 -- VAN -- project-name",
    is_background: false
});
```

### File Writing
```javascript
// ‚úÖ CORRECT - MCP File Writing
mcp_filesystem_write_file({
    path: "memory-bank/2025-07-20 12:30 -- VAN -- project-name/tasks.md",
    content: "# Task: Project Name\n\n## Description\n..."
});

// ‚ùå INCORRECT - Platform Command
run_terminal_cmd({
    command: "echo '# Task: Project Name' > memory-bank/2025-07-20 12:30 -- VAN -- project-name/tasks.md",
    is_background: false
});
```

### File Reading
```javascript
// ‚úÖ CORRECT - MCP File Reading
mcp_filesystem_read_file({
    path: "memory-bank/2025-07-20 12:30 -- VAN -- project-name/tasks.md"
});

// ‚ùå INCORRECT - Platform Command
run_terminal_cmd({
    command: "cat memory-bank/2025-07-20 12:30 -- VAN -- project-name/tasks.md",
    is_background: false
});
```

### Directory Listing
```javascript
// ‚úÖ CORRECT - MCP Directory Listing
mcp_filesystem_list_directory({
    path: "memory-bank"
});

// ‚ùå INCORRECT - Platform Command
run_terminal_cmd({
    command: "ls -la memory-bank",
    is_background: false
});
```

### File Moving/Renaming
```javascript
// ‚úÖ CORRECT - MCP File Moving
mcp_filesystem_move_file({
    source: "memory-bank/2025-07-20 12:30 -- VAN -- project-name",
    destination: "memory-bank/2025-07-20 12:35 -- PLAN -- project-name"
});

// ‚ùå INCORRECT - Platform Command
run_terminal_cmd({
    command: "mv memory-bank/2025-07-20 12:30 -- VAN -- project-name memory-bank/2025-07-20 12:35 -- PLAN -- project-name",
    is_background: false
});
```

## üéØ MODE-SPECIFIC MCP REQUIREMENTS

### VAN Mode
- ‚úÖ **Project Creation**: Use `mcp_filesystem_create_directory` for project folders
- ‚úÖ **File Initialization**: Use `mcp_filesystem_write_file` for all Memory Bank files
- ‚úÖ **Project Detection**: Use `mcp_filesystem_list_directory` for scanning projects

### PLAN Mode
- ‚úÖ **File Reading**: Use `mcp_filesystem_read_file` for tasks.md and other files
- ‚úÖ **Plan Writing**: Use `mcp_filesystem_write_file` for implementation plans
- ‚úÖ **Stage Transition**: Use `mcp_filesystem_move_file` for folder renaming

### CREATIVE Mode
- ‚úÖ **Design Documents**: Use `mcp_filesystem_write_file` for creative phase docs
- ‚úÖ **Template Creation**: Use `mcp_filesystem_write_file` for design templates
- ‚úÖ **File Updates**: Use `mcp_filesystem_edit_file` for incremental updates

### IMPLEMENT Mode
- ‚úÖ **Code Files**: Use `mcp_filesystem_write_file` for new code files
- ‚úÖ **File Modifications**: Use `mcp_filesystem_edit_file` for code changes
- ‚úÖ **Progress Tracking**: Use `mcp_filesystem_write_file` for progress.md

### REFLECT Mode
- ‚úÖ **Reflection Documents**: Use `mcp_filesystem_write_file` for reflection.md
- ‚úÖ **File Analysis**: Use `mcp_filesystem_read_file` for reviewing files
- ‚úÖ **Documentation**: Use `mcp_filesystem_write_file` for lessons learned

### ARCHIVE Mode
- ‚úÖ **Archive Creation**: Use `mcp_filesystem_write_file` for archive.md
- ‚úÖ **File Organization**: Use `mcp_filesystem_move_file` for organizing archives
- ‚úÖ **Final Updates**: Use `mcp_filesystem_write_file` for final documentation

## ‚ö†Ô∏è EXCEPTIONS AND FALLBACKS

### When MCP is Not Available
If FileSystem MCP functions are not available, document the reason and use platform commands:

```javascript
// ‚ö†Ô∏è EXCEPTION - Platform Command with Justification
// Reason: FileSystem MCP not available in current environment
run_terminal_cmd({
    command: "mkdir -p memory-bank/2025-07-20 12:30 -- VAN -- project-name",
    is_background: false,
    explanation: "Creating project directory - MCP not available"
});
```

### Complex Operations
For operations that require multiple steps or complex logic:

```javascript
// ‚úÖ CORRECT - Complex Operation with MCP
// Step 1: Create directory
mcp_filesystem_create_directory({
    path: "memory-bank/2025-07-20 12:30 -- VAN -- project-name"
});

// Step 2: Create multiple files
const files = ['tasks.md', 'activeContext.md', 'projectbrief.md'];
files.forEach(file => {
    mcp_filesystem_write_file({
        path: `memory-bank/2025-07-20 12:30 -- VAN -- project-name/${file}`,
        content: getTemplateContent(file)
    });
});
```

## üìä MCP USAGE VERIFICATION

### Success Metrics
- ‚úÖ **100% MCP Usage**: All file operations use MCP functions
- ‚úÖ **Zero Platform Commands**: No platform-specific file commands
- ‚úÖ **Consistent Behavior**: Same operations work across all platforms
- ‚úÖ **Better Error Handling**: MCP provides standardized error responses

### Verification Checklist
```
‚úì MCP ENFORCEMENT CHECKLIST
- All file operations use MCP functions? [YES/NO]
- Platform commands documented with justification? [YES/NO/NA]
- MCP operations properly documented? [YES/NO]
- Error handling consistent across operations? [YES/NO]
- Cross-platform compatibility verified? [YES/NO]

‚Üí If all YES: MCP enforcement complete
‚Üí If any NO: Address missing elements
```

## üîß INTEGRATION WITH EXISTING RULES

This rule works in conjunction with:

- **command-execution.mdc**: Provides MCP integration guidelines
- **file-verification.mdc**: Uses MCP for file operations
- **platform-awareness.mdc**: MCP eliminates platform-specific needs
- **All Mode Instructions**: Updated to reference MCP enforcement

## üöÄ BENEFITS OF MCP ENFORCEMENT

### Technical Benefits
- **Cross-Platform Reliability**: Eliminates Windows vs Unix differences
- **Atomic Operations**: MCP provides safer file operations
- **Consistent Error Handling**: Standardized responses across all operations
- **Better Encoding Support**: Automatic handling of text encoding
- **Path Security**: Built-in validation prevents path traversal attacks

### Operational Benefits
- **Reduced Complexity**: Single implementation for all platforms
- **Improved Reliability**: MCP provides better error handling
- **Future-Proof**: Ready for additional MCP capabilities
- **Maintenance**: Easier to maintain and update

### Quality Benefits
- **Consistency**: Same behavior across all environments
- **Documentation**: Better tracking of file operations
- **Debugging**: Clearer error messages and operation logs
- **Testing**: More predictable behavior for testing