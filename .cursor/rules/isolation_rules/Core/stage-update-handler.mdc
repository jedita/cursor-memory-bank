
# STAGE UPDATE HANDLER

> **TL;DR:** This system automatically renames Memory Bank project folders when transitioning between modes, updating both the stage suffix and timestamp to reflect the current working state.

## üéØ AUTOMATIC STAGE TRANSITION PROTOCOL

### Stage Update Process

```mermaid
graph TD
    Start["STAGE_UPDATE<br>Request"] --> Detect["Detect Current<br>Project Folder"]
    Detect --> Parse["Parse Folder Name<br>Extract: name, timestamp, stage"]
    Parse --> Generate["Generate Fresh<br>Timestamp"]
    Generate --> Build["Build New<br>Folder Name"]
    Build --> Rename["Rename Project<br>Folder"]
    Rename --> Verify["Verify Rename<br>Success"]
    Verify --> Complete["Stage Transition<br>Complete"]
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style Detect fill:#ffa64d,stroke:#cc7a30,color:white
    style Parse fill:#4dbb5f,stroke:#36873f,color:white
    style Generate fill:#d971ff,stroke:#a33bc2,color:white
    style Build fill:#4dbbbb,stroke:#368787,color:white
    style Rename fill:#ff71c2,stroke:#c23b8a,color:white
    style Verify fill:#80bfff,stroke:#4da6ff,color:white
    style Complete fill:#8cff8c,stroke:#4dbb5f,color:white
```

## üîÑ STAGE UPDATE IMPLEMENTATION

### Simple Stage Update Instructions

When transitioning between modes, follow these simple steps:

1. **Find Current Project Folder**
   - Look in the `memory-bank/` directory
   - Identify the folder with pattern: `timestamp -- stage -- project-name`
   - Example: `2025-07-15 14:11 -- VAN -- fix-bug`

2. **Generate New Folder Name**
   - Keep the same project name (extract from current folder)
   - **CRITICAL**: Generate a fresh current timestamp in format: `yyyy-MM-dd HH:mm` (do NOT reuse the old timestamp)
   - Use the new target stage (VAN, PLAN, CREATIVE, IMPLEMENT, REFLECT, ARCHIVE)
   - Example: `2025-07-15 15:23 -- PLAN -- fix-bug` (where 15:23 is the current time, not the original 14:11)

3. **Rename the Folder**
   - Use the appropriate tool to rename the folder from old name to new name
   - Verify the rename was successful
   - Report the result to the user

### Stage Update Example

```
User requests transition: VAN ‚Üí PLAN

1. Current folder: "2025-07-15 12:30 -- VAN -- my-feature"
2. New timestamp: "2025-07-15 15:45"
3. Target stage: "PLAN"
4. New folder: "2025-07-15 15:45 -- PLAN -- my-feature"
5. Execute rename operation
6. Confirm: "‚úÖ Project folder updated to: 2025-07-15 15:45 -- PLAN -- my-feature"
```

## üõ†Ô∏è PRACTICAL STAGE TRANSITION IMPLEMENTATION

### Cross-Platform Stage Update Function

#### PowerShell Implementation (Windows)
```powershell
function Update-MemoryBankStage {
    param(
        [Parameter(Mandatory=$true)]
        [string]$TargetStage,
        
        [Parameter(Mandatory=$false)]
        [string]$MemoryBankPath = "memory-bank"
    )
    
    # Find current project folder
    $folders = Get-ChildItem -Path $MemoryBankPath -Directory
    $currentProject = $null
    
    foreach ($folder in $folders) {
        if ($folder.Name -match "^(\d{4}-\d{2}-\d{2} \d{2}:\d{2})\s*--\s*(\w+)\s*--\s*(.+)$") {
            $currentProject = @{
                FolderName = $folder.Name
                FullPath = $folder.FullName
                Timestamp = $matches[1]
                Stage = $matches[2]
                ProjectName = $matches[3]
            }
            break # Take the first matching project (should be the most recent)
        }
    }
    
    if (-not $currentProject) {
        Write-Output "‚ùå No current project folder found in $MemoryBankPath"
        return
    }
    
    # Generate fresh timestamp
    $newTimestamp = Get-Date -Format "yyyy-MM-dd HH:mm"
    $newFolderName = "$newTimestamp -- $TargetStage -- $($currentProject.ProjectName)"
    $newFullPath = Join-Path $MemoryBankPath $newFolderName
    
    try {
        # Rename the project folder
        Rename-Item -Path $currentProject.FullPath -NewName $newFolderName -ErrorAction Stop
        
        Write-Output "‚úÖ Project folder updated to: $newFolderName"
        Write-Output "üïí Timestamp refreshed: $($currentProject.Timestamp) ‚Üí $newTimestamp"
        Write-Output "üè∑Ô∏è Stage updated: $($currentProject.Stage) ‚Üí $TargetStage"
        
        return @{
            Success = $true
            OldFolder = $currentProject.FolderName
            NewFolder = $newFolderName
            OldTimestamp = $currentProject.Timestamp
            NewTimestamp = $newTimestamp
            ProjectName = $currentProject.ProjectName
        }
        
    } catch {
        Write-Output "‚ùå Error updating project stage: $($_.Exception.Message)"
        Write-Output "Please ensure the project folder is not in use"
        return @{ Success = $false; Error = $_.Exception.Message }
    }
}

# Usage examples:
# Update-MemoryBankStage -TargetStage "PLAN"
# Update-MemoryBankStage -TargetStage "IMPLEMENT"
# Update-MemoryBankStage -TargetStage "REFLECT"
```

#### Bash/Zsh Implementation (Unix/Linux/macOS)
```bash
#!/bin/bash

update_memory_bank_stage() {
    local target_stage="$1"
    local memory_bank_path="${2:-memory-bank}"
    
    if [ -z "$target_stage" ]; then
        echo "‚ùå Error: Target stage is required"
        echo "Usage: update_memory_bank_stage TARGET_STAGE [MEMORY_BANK_PATH]"
        return 1
    fi
    
    # Find current project folder
    local current_folder=""
    local project_name=""
    local old_timestamp=""
    local old_stage=""
    
    for folder in "$memory_bank_path"/*; do
        if [ -d "$folder" ]; then
            local folder_name=$(basename "$folder")
            if [[ $folder_name =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2}\ [0-9]{2}:[0-9]{2})\ --\ ([A-Z]+)\ --\ (.+)$ ]]; then
                current_folder="$folder"
                old_timestamp="${BASH_REMATCH[1]}"
                old_stage="${BASH_REMATCH[2]}"
                project_name="${BASH_REMATCH[3]}"
                break
            fi
        fi
    done
    
    if [ -z "$current_folder" ]; then
        echo "‚ùå No current project folder found in $memory_bank_path"
        return 1
    fi
    
    # Generate fresh timestamp
    local new_timestamp=$(date '+%Y-%m-%d %H:%M')
    local new_folder_name="$new_timestamp -- $target_stage -- $project_name"
    local new_full_path="$memory_bank_path/$new_folder_name"
    
    # Rename the project folder
    if mv "$current_folder" "$new_full_path" 2>/dev/null; then
        echo "‚úÖ Project folder updated to: $new_folder_name"
        echo "üïí Timestamp refreshed: $old_timestamp ‚Üí $new_timestamp"
        echo "üè∑Ô∏è Stage updated: $old_stage ‚Üí $target_stage"
        return 0
    else
        echo "‚ùå Error updating project stage"
        echo "Please ensure the project folder is not in use"
        return 1
    fi
}

# Usage examples:
# update_memory_bank_stage "PLAN"
# update_memory_bank_stage "IMPLEMENT"
# update_memory_bank_stage "REFLECT"
```

### Integration with Custom Modes

Custom mode instructions should call these functions when transitioning stages:

```markdown
## Stage Transition (Custom Mode Integration)

When a custom mode needs to transition to a new stage:

1. **Detect Platform**: Use platform-awareness to determine OS
2. **Call Update Function**: Execute the appropriate stage update function
3. **Verify Result**: Confirm the folder was renamed successfully
4. **Continue**: Proceed with the new mode operations

### Example Integration:
```
# At the start of PLAN mode
Before proceeding with planning operations, update project folder:
1. Call: update_memory_bank_stage "PLAN"
2. Verify: Project folder now shows current timestamp + PLAN stage
3. Continue: Proceed with PLAN mode workflow
```
```

## üìã FOLDER NAME PATTERN

### Standard Format
```
<timestamp> -- <stage> -- <project-name>
```

### Components
- **Timestamp**: `YYYY-MM-DD HH:mm` format
- **Stage**: One of: VAN, PLAN, CREATIVE, IMPLEMENT, REFLECT, ARCHIVE
- **Project Name**: Alphanumeric characters, spaces, underscores, hyphens

### Validation Rules
- Project name cannot be empty
- Timestamp must be valid and current
- Stage must be one of the allowed values
- No duplicate folder names

## üö¶ ERROR HANDLING

### Common Issues
- **No current project folder found**: Prompt user to create a new project
- **Invalid folder name format**: Suggest manual correction
- **Permission denied**: Check directory permissions
- **Folder already exists**: Wait and retry with new timestamp

### Recovery Actions
- If rename fails, report the error clearly
- Suggest corrective actions based on the specific error
- Maintain system state consistency

## ‚úÖ VERIFICATION

After stage update:
- Confirm new folder exists with correct name
- Verify old folder no longer exists
- Update any internal references to the new path
- Report success to user

- Confirm new folder exists with correct name
- Verify old folder no longer exists
- Update any internal references to the new path
- Report success to user
