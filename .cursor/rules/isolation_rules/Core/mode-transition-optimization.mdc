---
description: Optimized mode transition protocol
globs: "**/mode-transition*/**", "**/context-preservation*/**"
alwaysApply: false
---

# MODE TRANSITION OPTIMIZATION

> **TL;DR:** This file implements optimized mode transitions to preserve context efficiently between different phases of the Memory Bank system. **IMPLEMENTED: Multi-project support with automatic folder rename on stage transitions via stage-update-handler.mdc.**

## üéØ MULTI-PROJECT TRANSITION PROTOCOL

### Automatic Stage Transitions

The automatic stage transition system is now implemented via the `stage-update-handler.mdc` core rule:

```mermaid
graph TD
    CurrentProject["Current Project<br><project-name> -- <old-timestamp> -- <old-stage>"] --> StageUpdate["STAGE_UPDATE<br>Handler Invocation"]
    StageUpdate --> DetectCurrent["Detect Current<br>Project Folder"]
    DetectCurrent --> GenerateTimestamp["Generate Fresh<br>Timestamp"]
    GenerateTimestamp --> CreateNewName["Create New Folder Name<br><project-name> -- <new-timestamp> -- <new-stage>"]
    CreateNewName --> PlatformCommand["Generate Platform-Aware<br>Rename Command"]
    PlatformCommand --> RenameFolder["Execute Atomic<br>Folder Rename"]
    RenameFolder --> UpdateMacro["Update <MB_ROOT><br>Macro Resolution"]
    UpdateMacro --> Complete["Stage Transition<br>Complete"]
    
    style CurrentProject fill:#e6ccff,stroke:#d9b3ff,color:black
    style StageUpdate fill:#ffa64d,stroke:#cc7a30,color:white
    style DetectCurrent fill:#4dbb5f,stroke:#36873f,color:white
    style GenerateTimestamp fill:#4dbbbb,stroke:#368787,color:white
    style CreateNewName fill:#d971ff,stroke:#a33bc2,color:white
    style PlatformCommand fill:#ff71c2,stroke:#c23b8a,color:white
    style RenameFolder fill:#5fd94d,stroke:#3da336,color:white
    style UpdateMacro fill:#80bfff,stroke:#4da6ff,color:white
    style Complete fill:#8cff8c,stroke:#4dbb5f,color:white
```

### Stage Transition Implementation Status

‚úÖ **COMPLETED FEATURES:**
- Automatic folder renaming with fresh timestamps
- Platform-aware command generation (Unix/Linux/macOS + Windows)
- Stage suffix updates (VAN, PLAN, CREATIVE, IMPLEMENT, REFLECT, ARCHIVE)
- Integration with all custom mode instruction files
- <MB_ROOT> cache invalidation and refresh
- Cross-platform timestamp formatting (YYYY-MM-DD HH:mm)
- Safe path handling with proper quoting
- Error handling and validation

‚úÖ **INTEGRATED COMPONENTS:**
- `stage-update-handler.mdc` - Core automatic transition logic
- `command-execution.mdc` - STAGE_UPDATE macro registration
- `platform-awareness.mdc` - Enhanced timestamp utilities and path safety
- All custom mode files updated with automatic transitions

### Usage in Custom Modes

Each custom mode now automatically executes stage transitions using simple instructions that can be implemented with available tools rather than hardcoded platform-specific commands.

## üîÑ ENHANCED CONTEXT TRANSFER PROTOCOL

```mermaid
graph TD
    Start["Mode A"] --> Create["Create Context<br>Summary Document"]
    Create --> Store["Store Critical<br>Context Data"]
    Store --> Transition["Transition<br>to Mode B"]
    Transition --> Verify["Verify Context<br>Availability"]
    Verify --> Load["Load Relevant<br>Context Data"]
    Load --> Continue["Continue in<br>Mode B"]
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style Create fill:#ffa64d,stroke:#cc7a30,color:white
    style Store fill:#4dbb5f,stroke:#36873f,color:white
    style Transition fill:#d94dbb,stroke:#a3378a,color:white
    style Verify fill:#4dbbbb,stroke:#368787,color:white
    style Load fill:#d971ff,stroke:#a33bc2,color:white
    style Continue fill:#ff71c2,stroke:#c23b8a,color:white
```

## üìä CONTEXT TRANSITION DOCUMENT

Create a standardized transition document when switching modes:

```markdown
# MODE TRANSITION: [Source Mode] ‚Üí [Target Mode]

## Context Summary
- Task: [Task name/description]
- Complexity: Level [1-4]
- Current Phase: [Phase name]
- Progress: [Percentage or status]

## Key Decisions
- [Decision 1]: [Brief summary]
- [Decision 2]: [Brief summary]
- [Decision 3]: [Brief summary]

## Critical Context
- [Context item 1]: [Value/status]
- [Context item 2]: [Value/status]
- [Context item 3]: [Value/status]

## Next Steps
1. [Next step 1]
2. [Next step 2]
3. [Next step 3]

## Resource Pointers
- [Resource 1]: [Location]
- [Resource 2]: [Location]
- [Resource 3]: [Location]
```

## üîç MODE-SPECIFIC TRANSITION HANDLERS

### Automatic Transition Examples (IMPLEMENTED)

#### VAN ‚Üí PLAN Transition
```
‚úÖ Automatic Stage Transition: VAN ‚Üí PLAN
- Command: STAGE_UPDATE target="PLAN"
- Result: 2025-07-15 14:11 -- PLAN -- project-name
- Files transferred: All Memory Bank files remain in project scope
- <MB_ROOT> automatically updated to new path
```

#### PLAN ‚Üí CREATIVE Transition
```
‚úÖ Automatic Stage Transition: PLAN ‚Üí CREATIVE  
- Command: STAGE_UPDATE target="CREATIVE"
- Result: 2025-07-15 14:12 -- CREATIVE -- project-name
- Files transferred: Planning documents accessible, creative workspace ready
- <MB_ROOT> automatically updated to new path
```

#### CREATIVE ‚Üí IMPLEMENT Transition
```
‚úÖ Automatic Stage Transition: CREATIVE ‚Üí IMPLEMENT
- Command: STAGE_UPDATE target="IMPLEMENT"
- Result: 2025-07-15 14:13 -- IMPLEMENT -- project-name
- Files transferred: Creative decisions and implementation plans accessible
- <MB_ROOT> automatically updated to new path
```

#### IMPLEMENT ‚Üí REFLECT Transition
```
‚úÖ Automatic Stage Transition: IMPLEMENT ‚Üí REFLECT
- Command: STAGE_UPDATE target="REFLECT"
- Result: 2025-07-15 14:14 -- REFLECT -- project-name
- Files transferred: Implementation results and build artifacts accessible
- <MB_ROOT> automatically updated to new path
```

## üß† HIERARCHICAL RULE CACHING

Implement rule caching to avoid redundant loading:

```javascript
// Pseudocode for rule caching
const ruleCache = {
  core: {}, // Core rules shared across modes
  van: {},
  plan: {},
  creative: {},
  implement: {},
  reflect: {},
  archive: {}
};

// Check cache before loading
function loadRule(rulePath) {
  const cacheKey = getCacheKey(rulePath);
  const category = getCategoryFromPath(rulePath);
  
  if (ruleCache[category][cacheKey]) {
    return ruleCache[category][cacheKey];
  }
  
  const ruleContent = readRuleFromFile(rulePath);
  ruleCache[category][cacheKey] = ruleContent;
  
  return ruleContent;
}

// Only invalidate specific rules when needed
function invalidateRule(rulePath) {
  const cacheKey = getCacheKey(rulePath);
  const category = getCategoryFromPath(rulePath);
  
  if (ruleCache[category][cacheKey]) {
    delete ruleCache[category][cacheKey];
  }
}
```

## ‚ö° DIFFERENTIAL MEMORY BANK UPDATES

```mermaid
graph TD
    Start["Memory Bank<br>Update Request"] --> Check{"File<br>Changed?"}
    Check -->|"No"| Skip["Skip Update<br>(No Changes)"]
    Check -->|"Yes"| Changed{"Specific<br>Section Changed?"}
    Changed -->|"No"| Full["Full File<br>Update"]
    Changed -->|"Yes"| Partial["Partial<br>Update Only"]
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style Check fill:#ffa64d,stroke:#cc7a30,color:white
    style Skip fill:#4dbb5f,stroke:#36873f,color:white
    style Changed fill:#d94dbb,stroke:#a3378a,color:white
    style Full fill:#4dbbbb,stroke:#368787,color:white
    style Partial fill:#d971ff,stroke:#a33bc2,color:white
```

Implement a more efficient update mechanism:

```javascript
// Pseudocode for differential updates
function updateMemoryBankFile(filePath, newContent) {
  // Read existing content
  const currentContent = readFile(filePath);
  
  // Skip if no changes
  if (currentContent === newContent) {
    return "No changes detected, update skipped";
  }
  
  // Check if we can do a partial update
  const sections = parseIntoSections(currentContent);
  const newSections = parseIntoSections(newContent);
  
  let updatedContent = currentContent;
  let updatedSections = 0;
  
  // Only update changed sections
  for (const [sectionName, sectionContent] of Object.entries(newSections)) {
    if (!sections[sectionName] || sections[sectionName] !== sectionContent) {
      updatedContent = replaceSection(updatedContent, sectionName, sectionContent);
      updatedSections++;
    }
  }
  
  // Write updated content
  writeFile(filePath, updatedContent);
  
  return `Updated ${updatedSections} section(s) in ${filePath}`;
}
```

## üîó CREATIVE TO IMPLEMENT BRIDGE

Special handling for the critical Creative ‚Üí Implement transition:

```markdown
## CREATIVE ‚Üí IMPLEMENT BRIDGE

### Design Decision Summary
Automatically generated summary of all creative phase decisions:

```json
{
  "components": [
    {
      "name": "ComponentA",
      "decision": "Approach X selected",
      "rationale": "Best performance characteristics",
      "implementation_notes": [
        "Use X library",
        "Implement caching",
        "Add error handling"
      ]
    },
    {
      "name": "ComponentB",
      "decision": "Custom solution",
      "rationale": "Unique requirements",
      "implementation_notes": [
        "Build from scratch",
        "Modular architecture",
        "Unit tests required"
      ]
    }
  ]
}
```

### Implementation Verification Checklist
Automatically generated verification checklist:

```markdown
# Implementation Readiness Checklist

- [ ] Design decisions available for all components
- [ ] Implementation notes provided for each decision
- [ ] Dependencies clearly identified
- [ ] Order of implementation determined
- [ ] Required libraries/frameworks documented
- [ ] Potential challenges identified
```

## üöÄ ADAPTIVE MODE LOADING

Implement progressive mode loading to optimize context:

```javascript
// Pseudocode for adaptive mode loading
function loadMode(modeName, taskComplexity) {
  // Always load core rules
  loadCoreRules();
  
  // Load complexity-appropriate rules
  loadComplexityRules(taskComplexity);
  
  // Load mode-specific essential rules
  loadModeEssentialRules(modeName);
  
  // Only load specialized rules as needed
  registerLazyLoadHandlers(modeName, taskComplexity);
}

function registerLazyLoadHandlers(modeName, taskComplexity) {
  // Register handlers to load additional rules only when needed
  if (modeName === "CREATIVE") {
    registerHandler("architecture", () => loadRule("creative-phase-architecture.mdc"));
    registerHandler("algorithm", () => loadRule("creative-phase-algorithm.mdc"));
    registerHandler("uiux", () => loadRule("creative-phase-uiux.mdc"));
  }
  
  // Similar patterns for other specialized rule types
}
```

