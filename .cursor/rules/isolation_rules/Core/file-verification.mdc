---
description: Optimized file verification
globs: file-verification.mdc
alwaysApply: false
---
# OPTIMIZED FILE VERIFICATION SYSTEM

> **TL;DR:** This system efficiently verifies and creates required Memory Bank file structures using batch operations and platform-optimized commands. Now includes multi-project discovery and creation capabilities.

## üîç MULTI-PROJECT FILE VERIFICATION WORKFLOW

```mermaid
graph TD
    Start["Start File<br>Verification"] --> ProjectDiscovery["Project Discovery<br>& Selection"]
    ProjectDiscovery --> CurrentProject{"Current Project<br>Resolved?"}
    CurrentProject -->|"Yes"| VerifyProject["Verify Project<br>File Structure"]
    CurrentProject -->|"No"| CreateProject["Create New<br>Project"]
    CreateProject --> VerifyProject
    VerifyProject --> MissingCheck{"Missing<br>Components?"}
    MissingCheck -->|"Yes"| BatchCreate["Batch Create<br>All Missing Items"]
    MissingCheck -->|"No"| Complete["Verification<br>Complete"]
    BatchCreate --> Report["Generate<br>Verification Report"]
    Report --> Complete
```

## üéØ PROJECT DISCOVERY & MANAGEMENT

### Project Discovery Process

```mermaid
graph TD
    Start["Start Discovery"] --> ScanMB["Scan memory-bank/<br>Directory"]
    ScanMB --> ParseFolders["Parse Project Folders<br>Extract: name, timestamp, stage"]
    ParseFolders --> HasProjects{"Projects<br>Found?"}
    HasProjects -->|"Yes"| SelectLatest["Select Latest<br>Timestamp"]
    HasProjects -->|"No"| CheckLegacy["Check for<br>Legacy Files"]
    CheckLegacy --> LegacyExists{"Legacy Files<br>Exist?"}
    LegacyExists -->|"Yes"| MigrateLegacy["Auto-migrate<br>to Project Folder"]
    LegacyExists -->|"No"| PromptNew["Prompt for<br>New Project"]
    SelectLatest --> SetCurrent["Set Current<br>Project"]
    MigrateLegacy --> SetCurrent
    PromptNew --> CreateNew["Create New<br>Project"]
    CreateNew --> SetCurrent
    SetCurrent --> Complete["Discovery<br>Complete"]
```

### Project Creation Helper

```javascript
// Pseudocode for new project creation
function createNewProject(projectName, stage = 'VAN') {
  // Validate project name
  validateProjectName(projectName);
  
  // Generate timestamp
  const now = new Date();
  const timestamp = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')} ${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
  
  // Create folder name
  const folderName = `${projectName} -- ${timestamp} -- ${stage}`;
  const projectPath = path.join('memory-bank', folderName);
  
  // Create project directory using FileSystem MCP
  // Refer to filesystem-mcp-enforcement.mdc for API details
  createDirectoryWithMCP(projectPath);
  
  // Initialize project files using FileSystem MCP
  initializeProjectFilesWithMCP(projectPath);
  
  return projectPath;
}

function initializeProjectFilesWithMCP(projectPath) {
  const requiredFiles = [
    { name: 'tasks.md', template: '# Tasks\n' },
    { name: 'activeContext.md', template: '# Active Context\n' },
    { name: 'progress.md', template: '# Progress\n' },
    { name: 'projectbrief.md', template: '# Project Brief\n' },
    { name: 'productContext.md', template: '# Product Context\n' },
    { name: 'systemPatterns.md', template: '# System Patterns\n' },
    { name: 'techContext.md', template: '# Tech Context\n' },
    { name: 'style-guide.md', template: '# Style Guide\n' },
    { name: 'creative.md', template: '# Creative Phase Notes\n' },
    { name: 'reflection.md', template: '# Reflection\n' },
    { name: 'archive.md', template: '# Archive\n' }
  ];
  
  // Create files using FileSystem MCP
  // Refer to filesystem-mcp-enforcement.mdc for API details
  requiredFiles.forEach(file => {
    writeFileWithMCP(projectPath, file.name, file.template);
  });
}
```



### Project Switching Helper

```javascript
// Pseudocode for project switching
function switchProject(targetProjectName, newStage) {
  const memoryBankDir = 'memory-bank';
  const projectFolders = scanProjectFolders(memoryBankDir);
  
  // Find target project
  const targetProject = projectFolders.find(p => 
    p.projectName === targetProjectName
  );
  
  if (!targetProject) {
    throw new Error(`Project "${targetProjectName}" not found`);
  }
  
  // Update timestamp and stage
  const now = new Date();
  const newTimestamp = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')} ${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
  const newFolderName = `${targetProjectName} -- ${newTimestamp} -- ${newStage}`;
  
  const oldPath = path.join(memoryBankDir, targetProject.folderName);
  const newPath = path.join(memoryBankDir, newFolderName);
  
  // Rename folder
  fs.renameSync(oldPath, newPath);
  
  return newPath;
}

function listProjects() {
  const memoryBankDir = 'memory-bank';
  const projectFolders = scanProjectFolders(memoryBankDir);
  
  return projectFolders.map(p => ({
    name: p.projectName,
    timestamp: p.timestamp,
    stage: p.stage,
    folderName: p.folderName
  })).sort((a, b) => b.timestamp.localeCompare(a.timestamp));
}
```

## üìã OPTIMIZED DIRECTORY CREATION

```mermaid
graph TD
    Start["Directory<br>Creation"] --> DetectOS["Detect Operating<br>System"]
    DetectOS -->|"Windows"| WinCmd["Batch Create<br>Windows Command"]
    DetectOS -->|"Mac/Linux"| UnixCmd["Batch Create<br>Unix Command"]
    WinCmd & UnixCmd --> Verify["Verify<br>Creation Success"]
    Verify --> Complete["Directory Setup<br>Complete"]
```

### Platform-Specific Commands

#### Windows (PowerShell) - Multi-Project Support
```powershell
# Create project-specific directories
$projectPath = "<MB_ROOT>"

# Create all required files
$files = @("$projectPath\tasks.md", 
           "$projectPath\projectbrief.md", 
           "$projectPath\productContext.md",
           "$projectPath\systemPatterns.md",
           "$projectPath\techContext.md",
           "$projectPath\activeContext.md",
           "$projectPath\creative.md",
           "$projectPath\reflection.md",
           "$projectPath\archive.md",
           "$projectPath\progress.md")

foreach ($file in $files) {
    if (-not (Test-Path $file)) {
        New-Item -Path $file -ItemType File -Force
    }
}
```

#### Mac/Linux (Bash) - Multi-Project Support
```bash
# Create project-specific directories
PROJECT_PATH="<MB_ROOT>"

# Create all required files
touch "$PROJECT_PATH"/tasks.md \
      "$PROJECT_PATH"/projectbrief.md \
      "$PROJECT_PATH"/productContext.md \
      "$PROJECT_PATH"/systemPatterns.md \
      "$PROJECT_PATH"/techContext.md \
      "$PROJECT_PATH"/activeContext.md \
      "$PROJECT_PATH"/creative.md \
      "$PROJECT_PATH"/reflection.md \
      "$PROJECT_PATH"/archive.md \
      "$PROJECT_PATH"/progress.md
```

## üìù STREAMLINED VERIFICATION PROCESS

Multi-project verification with batch operations:

```powershell
# Windows - PowerShell Multi-Project Verification
$projectPath = "<MB_ROOT>"  # Resolved by platform-awareness
$requiredFiles = @("tasks.md", "projectbrief.md", "productContext.md", "systemPatterns.md", "techContext.md", "activeContext.md", "progress.md","creative.md", "reflection.md", "archive.md")

$missingFiles = $requiredFiles | ForEach-Object { "$projectPath\$_" } | 
                Where-Object { -not (Test-Path $_) -or (Test-Path $_ -PathType Container) }

if ($missingFiles.Count -eq 0) {
    Write-Output "‚úì All required project components verified for current project"
} else {
    if ($missingFiles.Count -gt 0) {
        $missingFiles | ForEach-Object { New-Item -Path $_ -ItemType File -Force }
    }
}
```

## üìù PROJECT FILE TEMPLATES

Optimized template creation for new projects:

```powershell
# Windows - PowerShell Project Templates
$projectPath = "<MB_ROOT>"
$templates = @{
    "$projectPath\tasks.md" = @"
# Memory Bank: Tasks

## Current Task
[Task not yet defined]

## Status
- [ ] Task definition
- [ ] Implementation plan
- [ ] Execution
- [ ] Documentation

## Requirements
[No requirements defined yet]
"@

    "$projectPath\activeContext.md" = @"
# Memory Bank: Active Context

## Current Focus
[No active focus defined]

## Status
[No status defined]

## Latest Changes
[No changes recorded]
"@

    "$projectPath\projectbrief.md" = @"
# Project Brief

## Project Overview
[Project overview to be defined]

## Objectives
[Project objectives to be defined]

## Scope
[Project scope to be defined]
"@
}

foreach ($file in $templates.Keys) {
    if (-not (Test-Path $file) -or (Get-Content $file -Raw).Trim() -eq "") {
        Set-Content -Path $file -Value $templates[$file]
    }
}
```

## üîç PERFORMANCE OPTIMIZATION BEST PRACTICES

1. **Project-Scoped Operations**: All operations are scoped to current project via `<MB_ROOT>`
2. **Batch Operations**: Create all project components at once
3. **Discovery Caching**: Cache project discovery results during session
4. **Lazy Migration**: Migrate legacy files only when needed
5. **Validation First**: Validate project names before creation

## üìù VERIFICATION REPORT FORMAT

```
‚úÖ MULTI-PROJECT VERIFICATION COMPLETE
- Current Project: [timestamp -- stage -- project-name]
- Project Path: [<MB_ROOT> resolved path]
- Created files: [list]
- All project components verified

Memory Bank system ready for use.
```

## üéØ PROJECT MANAGEMENT COMMANDS

Available in VAN mode and other modes:

- **LIST PROJECTS**: Show all projects with timestamps and stages
- **SWITCH PROJECT <name>**: Switch to different project context  
- **CURRENT PROJECT**: Display currently active project
- **NEW PROJECT <name>**: Create new project with full file structure

## üìö FILESYSTEM MCP REFERENCE

**For all file operations, refer to**: `filesystem-mcp-enforcement.mdc` for complete API reference and implementation details. 