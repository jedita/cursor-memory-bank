---
description: Optimized file verification
globs: file-verification.mdc
alwaysApply: false
---
# OPTIMIZED FILE VERIFICATION SYSTEM

> **TL;DR:** This system efficiently verifies and creates required Memory Bank file structures using batch operations and platform-optimized commands. Now includes multi-project discovery and creation capabilities.

## üîç MULTI-PROJECT FILE VERIFICATION WORKFLOW

```mermaid
graph TD
    Start["Start File<br>Verification"] --> ProjectDiscovery["Project Discovery<br>& Selection"]
    ProjectDiscovery --> CurrentProject{"Current Project<br>Resolved?"}
    CurrentProject -->|"Yes"| VerifyProject["Verify Project<br>File Structure"]
    CurrentProject -->|"No"| CreateProject["Create New<br>Project"]
    CreateProject --> VerifyProject
    VerifyProject --> MissingCheck{"Missing<br>Components?"}
    MissingCheck -->|"Yes"| BatchCreate["Batch Create<br>All Missing Items"]
    MissingCheck -->|"No"| Complete["Verification<br>Complete"]
    BatchCreate --> Report["Generate<br>Verification Report"]
    Report --> Complete
```

## üéØ PROJECT DISCOVERY & MANAGEMENT

### Project Discovery Process

```mermaid
graph TD
    Start["Start Discovery"] --> ScanMB["Scan memory-bank/<br>Directory"]
    ScanMB --> ParseFolders["Parse Project Folders<br>Extract: name, timestamp, stage"]
    ParseFolders --> HasProjects{"Projects<br>Found?"}
    HasProjects -->|"Yes"| SelectLatest["Select Latest<br>Timestamp"]
    HasProjects -->|"No"| CheckLegacy["Check for<br>Legacy Files"]
    CheckLegacy --> LegacyExists{"Legacy Files<br>Exist?"}
    LegacyExists -->|"Yes"| MigrateLegacy["Auto-migrate<br>to Project Folder"]
    LegacyExists -->|"No"| PromptNew["Prompt for<br>New Project"]
    SelectLatest --> SetCurrent["Set Current<br>Project"]
    MigrateLegacy --> SetCurrent
    PromptNew --> CreateNew["Create New<br>Project"]
    CreateNew --> SetCurrent
    SetCurrent --> Complete["Discovery<br>Complete"]
```

### Project Creation Helper

```javascript
// Pseudocode for new project creation
function createNewProject(projectName, stage = 'VAN') {
  // Validate project name
  validateProjectName(projectName);
  
  // Generate timestamp
  const now = new Date();
  const timestamp = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')} ${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
  
  // Create folder name
  const folderName = `${projectName} -- ${timestamp} -- ${stage}`;
  const projectPath = path.join('memory-bank', folderName);
  
  // Create project directory using FileSystem MCP
  // Refer to filesystem-mcp-enforcement.mdc for API details
  createDirectoryWithMCP(projectPath);
  
  // Initialize project files using FileSystem MCP
  initializeProjectFilesWithMCP(projectPath);
  
  return projectPath;
}

function initializeProjectFilesWithMCP(projectPath) {
  const requiredFiles = [
    { name: 'tasks.md', template: '# Tasks\n' },
    { name: 'activeContext.md', template: '# Active Context\n' },
    { name: 'progress.md', template: '# Progress\n' },
    { name: 'projectbrief.md', template: '# Project Brief\n' },
    { name: 'productContext.md', template: '# Product Context\n' },
    { name: 'systemPatterns.md', template: '# System Patterns\n' },
    { name: 'techContext.md', template: '# Tech Context\n' },
    { name: 'style-guide.md', template: '# Style Guide\n' },
    { name: 'creative.md', template: '# Creative Phase Notes\n' },
    { name: 'reflection.md', template: '# Reflection\n' },
    { name: 'archive.md', template: '# Archive\n' }
  ];
  
  // Create files using FileSystem MCP
  // Refer to filesystem-mcp-enforcement.mdc for API details
  requiredFiles.forEach(file => {
    writeFileWithMCP(projectPath, file.name, file.template);
  });
}
```



### Project Switching Helper

```javascript
// Pseudocode for project switching
function switchProject(targetProjectName, newStage) {
  const memoryBankDir = 'memory-bank';
  const projectFolders = scanProjectFolders(memoryBankDir);
  
  // Find target project
  const targetProject = projectFolders.find(p => 
    p.projectName === targetProjectName
  );
  
  if (!targetProject) {
    throw new Error(`Project "${targetProjectName}" not found`);
  }
  
  // Update timestamp and stage
  const now = new Date();
  const newTimestamp = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')} ${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
  const newFolderName = `${targetProjectName} -- ${newTimestamp} -- ${newStage}`;
  
  const oldPath = path.join(memoryBankDir, targetProject.folderName);
  const newPath = path.join(memoryBankDir, newFolderName);
  
  // Rename folder
  fs.renameSync(oldPath, newPath);
  
  return newPath;
}

function listProjects() {
  const memoryBankDir = 'memory-bank';
  const projectFolders = scanProjectFolders(memoryBankDir);
  
  return projectFolders.map(p => ({
    name: p.projectName,
    timestamp: p.timestamp,
    stage: p.stage,
    folderName: p.folderName
  })).sort((a, b) => b.timestamp.localeCompare(a.timestamp));
}
```

## üìã OPTIMIZED DIRECTORY CREATION

```mermaid
graph TD
    Start["Directory<br>Creation"] --> DetectOS["Detect Operating<br>System"]
    DetectOS -->|"Windows"| WinCmd["Batch Create<br>Windows Command"]
    DetectOS -->|"Mac/Linux"| UnixCmd["Batch Create<br>Unix Command"]
    WinCmd & UnixCmd --> Verify["Verify<br>Creation Success"]
    Verify --> Complete["Directory Setup<br>Complete"]
```

### FileSystem MCP Commands (Cross-Platform)

#### FileSystem MCP Multi-Project Support
```javascript
// Use FileSystem MCP for cross-platform file operations
const projectPath = "<MB_ROOT>";

// Create all required files using MCP
const files = [
    "tasks.md", "projectbrief.md", "productContext.md", 
    "systemPatterns.md", "techContext.md", "activeContext.md",
    "creative.md", "reflection.md", "archive.md", "progress.md"
];

files.forEach(fileName => {
    const filePath = `${projectPath}/${fileName}`;
    // Check if file exists using MCP, create if missing
    mcp_filesystem_get_file_info({ path: filePath })
        .catch(() => {
            // File doesn't exist, create it using MCP
            mcp_filesystem_write_file({ 
                path: filePath, 
                content: `# ${fileName.replace('.md', '').replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n` 
            });
        });
});
```

#### ‚ö†Ô∏è Legacy Platform Commands (Deprecated)
The following platform-specific commands have been replaced by FileSystem MCP:
- **PowerShell**: `Test-Path`, `New-Item` ‚Üí `mcp_filesystem_get_file_info`, `mcp_filesystem_write_file`
- **Bash**: `touch` ‚Üí `mcp_filesystem_write_file`

## üìù STREAMLINED VERIFICATION PROCESS

Multi-project verification with FileSystem MCP:

```javascript
// FileSystem MCP Multi-Project Verification
const projectPath = "<MB_ROOT>";  // Resolved by platform-awareness
const requiredFiles = [
    "tasks.md", "projectbrief.md", "productContext.md", 
    "systemPatterns.md", "techContext.md", "activeContext.md", 
    "progress.md", "creative.md", "reflection.md", "archive.md"
];

// Check for missing files using MCP
const missingFiles = [];
for (const fileName of requiredFiles) {
    const filePath = `${projectPath}/${fileName}`;
    try {
        await mcp_filesystem_get_file_info({ path: filePath });
    } catch {
        missingFiles.push(filePath);
    }
}

if (missingFiles.length === 0) {
    console.log("‚úì All required project components verified for current project");
} else {
    // Create missing files using MCP
    for (const filePath of missingFiles) {
        await mcp_filesystem_write_file({ 
            path: filePath, 
            content: `# ${path.basename(filePath, '.md').replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n`
        });
    }
    console.log(`‚úì Created ${missingFiles.length} missing file(s)`);
}
```

## üìù PROJECT FILE TEMPLATES

Optimized template creation using FileSystem MCP:

```javascript
// FileSystem MCP Project Templates
const projectPath = "<MB_ROOT>";
const templates = {
    [`${projectPath}/tasks.md`]: `# Memory Bank: Tasks

## Current Task
[Task not yet defined]

## Status
- [ ] Task definition
- [ ] Implementation plan
- [ ] Execution
- [ ] Documentation

## Requirements
[No requirements defined yet]
`,

    [`${projectPath}/activeContext.md`]: `# Memory Bank: Active Context

## Current Focus
[No active focus defined]

## Status
[No status defined]

## Latest Changes
[No changes recorded]
`,

    [`${projectPath}/projectbrief.md`]: `# Project Brief

## Project Overview
[Project overview to be defined]

## Objectives
[Project objectives to be defined]

## Scope
[Project scope to be defined]
`
};

// Create templates using MCP
for (const [filePath, content] of Object.entries(templates)) {
    try {
        const fileInfo = await mcp_filesystem_get_file_info({ path: filePath });
        const existingContent = await mcp_filesystem_read_file({ path: filePath });
        if (!existingContent.trim()) {
            await mcp_filesystem_write_file({ path: filePath, content });
        }
    } catch {
        // File doesn't exist, create it
        await mcp_filesystem_write_file({ path: filePath, content });
    }
}
```

## üîç PERFORMANCE OPTIMIZATION BEST PRACTICES

1. **Project-Scoped Operations**: All operations are scoped to current project via `<MB_ROOT>`
2. **Batch Operations**: Create all project components at once
3. **Discovery Caching**: Cache project discovery results during session
4. **Lazy Migration**: Migrate legacy files only when needed
5. **Validation First**: Validate project names before creation

## üìù VERIFICATION REPORT FORMAT

```
‚úÖ MULTI-PROJECT VERIFICATION COMPLETE
- Current Project: [timestamp -- stage -- project-name]
- Project Path: [<MB_ROOT> resolved path]
- Created files: [list]
- All project components verified

Memory Bank system ready for use.
```

## üéØ PROJECT MANAGEMENT COMMANDS

Available in VAN mode and other modes:

- **LIST PROJECTS**: Show all projects with timestamps and stages
- **SWITCH PROJECT <name>**: Switch to different project context  
- **CURRENT PROJECT**: Display currently active project
- **NEW PROJECT <name>**: Create new project with full file structure

## üìö FILESYSTEM MCP REFERENCE

**For all file operations, refer to**: `filesystem-mcp-enforcement.mdc` for complete API reference and implementation details. 