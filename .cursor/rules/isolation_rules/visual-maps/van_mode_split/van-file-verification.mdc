---
description: Visual process map for VAN mode file verification
globs: van-file-verification.mdc
alwaysApply: false
---

# OPTIMIZED FILE VERIFICATION SYSTEM

üö® CRITICAL: MEMORY BANK VERIFICATION REQUIRED üö®
Memory Bank structure MUST exist before any file operations
This check MUST be executed first in all verification processes

> **TL;DR:** This system provides a structured approach to verify file structure integrity before task implementation, with emphasis on efficient checks and clear status reporting.

## üîç FILE VERIFICATION WORKFLOW

```mermaid
graph TD
    %% Critical Memory Bank verification - MUST be first
    Start["Start File Verification"] --> MemBankCheck{"Memory Bank<br>Exists?"}
    MemBankCheck -->|"No"| CreateMemBank["CREATE MEMORY BANK<br>[CRITICAL]"]
    MemBankCheck -->|"Yes"| VerifyMemBankComplete["Verify Memory Bank<br>Structure Complete"]
    CreateMemBank --> VerifyMemBankComplete
    
    VerifyMemBankComplete --> PassCheck{"All Critical<br>Checks Pass?"}
    PassCheck -->|"No"| AbortAll["‚õî ABORT ALL OPERATIONS<br>Fix Memory Bank First"]
    PassCheck -->|"Yes"| MainVerification

    %% Regular verification flow continues here
    MainVerification["Start Full<br>File Verification"] --> BatchVerify["Batch Verification<br>Using Patterns"]
    BatchVerify --> BrokenLinks["Check for<br>Broken References"]
    BrokenLinks --> DirectoryStructure["Verify Directory<br>Structure"]
    DirectoryStructure --> Status{"All Verifications<br>Successful?"}
    
    Status -->|"Yes"| Complete["Verification<br>Complete ‚úì"]
    Status -->|"No"| Diagnose["Diagnose<br>Issues"]
    Diagnose --> Attempt{"Attempt Auto<br>Resolution?"}
    
    Attempt -->|"Yes"| AutoFix["Auto-Fix<br>Issues"]
    Attempt -->|"No"| ReportIssue["Report Issues to<br>User"]
    
    AutoFix --> Recheck{"Issues<br>Resolved?"}
    Recheck -->|"Yes"| ReportSuccess["Report Success<br>to User"]
    Recheck -->|"No"| ReportIssue
    
    ReportSuccess --> Complete
    ReportIssue --> UserAction["Wait for<br>User Action"]
    UserAction --> ReVerify["Re-Verify<br>After User Action"]
    ReVerify --> Status
    
    style MemBankCheck fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style CreateMemBank fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style VerifyMemBankComplete fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style PassCheck fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style AbortAll fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style Status fill:#f6546a,stroke:#c30052,color:white
    style Complete fill:#10b981,stroke:#059669,color:white
```

## üß© MEMORY BANK VERIFICATION - CRITICAL COMPONENT

Memory Bank verification MUST be executed first in any file verification process:

```javascript
function verifyMemoryBank() {
  // Check if Memory Bank exists
  const memoryBankExists = checkDirectoryExists("memory-bank");
  if (!memoryBankExists) {
    console.error("‚õî CRITICAL ERROR: Memory Bank does not exist");
    createMemoryBankStructure();
    return verifyMemoryBankCreation();
  }
  
  const missingDirs = requiredDirs.filter(dir => !checkDirectoryExists(dir));
  if (missingDirs.length > 0) {
    console.error(`‚õî CRITICAL ERROR: Missing Memory Bank directories: ${missingDirs.join(", ")}`);
    createMissingDirectories(missingDirs);
    return verifyMemoryBankCreation();
  }
  
  // Check critical files
  const criticalFiles = [
    "<MB_ROOT>/activeContext.md",
    "<MB_ROOT>/systemPatterns.md"
  ];
  
  const missingFiles = criticalFiles.filter(file => !checkFileExists(file));
  if (missingFiles.length > 0) {
    console.error(`‚õî CRITICAL ERROR: Missing critical files: ${missingFiles.join(", ")}`);
    createMissingFiles(missingFiles);
    return verifyMemoryBankCreation();
  }
  
  return true; // Memory Bank verification successful
}

// MANDATORY: This must be called before any other verification
const memoryBankVerified = verifyMemoryBank();
if (!memoryBankVerified) {
  throw new Error("‚õî MEMORY BANK VERIFICATION FAILED - CANNOT PROCEED");
}
```

## üìã MEMORY BANK VERIFICATION CHECKLIST

```
‚úì MEMORY BANK VERIFICATION CHECKLIST
- Memory Bank directory exists? [YES/NO]
- Required subdirectories exist? [YES/NO]
- Critical files exist? [YES/NO]
- File content is valid? [YES/NO]

‚Üí If ALL YES: Memory Bank verification passed - Continue file verification
‚Üí If ANY NO: STOP ALL PROCESSING and FIX MEMORY BANK
```

## üîç BATCH VERIFICATION WORKFLOW

## üìã OPTIMIZED DIRECTORY CREATION

```mermaid
graph TD
    Start["Directory<br>Creation"] --> DetectOS["Detect Operating<br>System"]
    DetectOS -->|"Windows"| WinCmd["Batch Create<br>Windows Command"]
    DetectOS -->|"Mac/Linux"| UnixCmd["Batch Create<br>Unix Command"]
    WinCmd & UnixCmd --> Verify["Verify<br>Creation Success"]
    Verify --> Complete["Directory Setup<br>Complete"]
```

### FileSystem MCP Commands (Cross-Platform)

#### FileSystem MCP File Creation
```javascript
// Use FileSystem MCP for cross-platform operations
// Resolve current project path (multi-project aware)
const projectPath = "<MB_ROOT>";

// Create directory using MCP (handles spaces and special characters)
try {
    await mcp_filesystem_create_directory({ path: projectPath });
} catch (error) {
    console.log(`Directory already exists or created: ${projectPath}`);
}

// Create all required files using MCP
const files = [
    "tasks.md", "projectbrief.md", "productContext.md",
    "systemPatterns.md", "techContext.md", "activeContext.md",
    "creative.md", "reflection.md", "archive.md", "progress.md"
];

for (const fileName of files) {
    const filePath = `${projectPath}/${fileName}`;
    try {
        await mcp_filesystem_get_file_info({ path: filePath });
        // File exists, skip creation
    } catch {
        // File doesn't exist, create it
        await mcp_filesystem_write_file({ 
            path: filePath, 
            content: `# ${fileName.replace('.md', '').replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n`
        });
    }
}
```

#### ‚ö†Ô∏è Legacy Platform Commands (Deprecated)
Platform-specific commands have been replaced by FileSystem MCP:
- **PowerShell**: `mkdir`, `Test-Path`, `New-Item` ‚Üí `mcp_filesystem_create_directory`, `mcp_filesystem_get_file_info`, `mcp_filesystem_write_file`
- **Bash**: `mkdir -p`, `touch` ‚Üí `mcp_filesystem_create_directory`, `mcp_filesystem_write_file`

## üìù STREAMLINED VERIFICATION PROCESS

Using FileSystem MCP for batch verification:

```javascript
// FileSystem MCP Batch Verification
const projectPath = "<MB_ROOT>";
const requiredFiles = [
    "tasks.md", "projectbrief.md", "productContext.md", "systemPatterns.md", 
    "techContext.md", "activeContext.md", "creative.md", "reflection.md", 
    "archive.md", "progress.md"
];

// Check missing directories and files using MCP
const missingDirs = [];
const missingFiles = [];

// Check if project directory exists
try {
    await mcp_filesystem_get_file_info({ path: projectPath });
} catch {
    missingDirs.push(projectPath);
}

// Check for missing files
for (const fileName of requiredFiles) {
    const filePath = `${projectPath}/${fileName}`;
    try {
        await mcp_filesystem_get_file_info({ path: filePath });
    } catch {
        missingFiles.push(filePath);
    }
}

if (missingDirs.length === 0 && missingFiles.length === 0) {
    console.log("‚úì All required components verified");
} else {
    // Create all missing items using MCP
    for (const dirPath of missingDirs) {
        await mcp_filesystem_create_directory({ path: dirPath });
    }
    
    for (const filePath of missingFiles) {
        const fileName = filePath.split('/').pop();
        await mcp_filesystem_write_file({ 
            path: filePath, 
            content: `# ${fileName.replace('.md', '').replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n`
        });
    }
    
    console.log(`‚úì Created ${missingDirs.length} directories and ${missingFiles.length} files`);
}
```

## üìù TEMPLATE INITIALIZATION

Optimize template creation using FileSystem MCP:

```javascript
// FileSystem MCP Template Creation
const projectPath = "<MB_ROOT>";
const templates = {
    "tasks.md": `# Memory Bank: Tasks

## Current Task
[Task not yet defined]

## Status
- [ ] Task definition
- [ ] Implementation plan
- [ ] Execution
- [ ] Documentation

## Requirements
[No requirements defined yet]
`,

    "activeContext.md": `# Memory Bank: Active Context

## Current Focus
[No active focus defined]

## Status
[No status defined]

## Latest Changes
[No changes recorded]
`,

    // Add other templates here
};

// Create templates using MCP
for (const [fileName, content] of Object.entries(templates)) {
    const filePath = `${projectPath}/${fileName}`;
    try {
        await mcp_filesystem_get_file_info({ path: filePath });
        // File exists, potentially update if empty
        const existingContent = await mcp_filesystem_read_file({ path: filePath });
        if (!existingContent.trim()) {
            await mcp_filesystem_write_file({ path: filePath, content });
        }
    } catch {
        // File doesn't exist, create it
        await mcp_filesystem_write_file({ path: filePath, content });
    }
}
```

## üîç PERFORMANCE OPTIMIZATION BEST PRACTICES

1. **Batch Operations**: Always use batch operations instead of individual commands
   ```
   # GOOD: Create all directories at once
   mkdir memory-bank
   
   # BAD: Create directories one at a time
   mkdir memory-bank
   # docs directory no longer required
   ```

2. **Pre-Check Optimization**: Check all requirements first, then create only what's missing
   ```
   # First check what's missing
   $missingItems = ...
   
   # Then create only what's missing
   if ($missingItems) { ... }
   ```

3. **Error Handling**: Include error handling in all commands
   ```
   mkdir memory-bank -ErrorAction SilentlyContinue
   ```

4. **Platform Adaptation**: Auto-detect platform and use appropriate commands
   ```
   if ($IsWindows) {
       # Windows commands
   } else {
       # Unix commands
   }
   ```

5. **One-Pass Verification**: Verify directory structure in a single pass
   ```
   $requiredPaths = @("memory-bank", "tasks.md")
   $missingPaths = $requiredPaths | Where-Object { -not (Test-Path $_) }
   ```

## üìù VERIFICATION REPORT FORMAT

```
‚úÖ VERIFICATION COMPLETE
- Created directories: [list]
- Created files: [list]
- All components verified

Memory Bank system ready for use.
``` 
